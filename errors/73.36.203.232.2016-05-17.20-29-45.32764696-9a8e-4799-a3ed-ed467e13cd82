(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> float() argument must be a string or a number"
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/travel/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport webbrowser\nimport gtk.gdk\nimport datetime\nimport time\nimport os, shutil\nimport glob\nimport pygeoip\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.webdriver.common.by import By\nimport json\nimport requests\nimport os\nfrom os import path\nfrom os import walk\n#from gluon.debug import dbg\n\n@auth.requires_login()\ndef index():\n    src = str(get_codes()[0])\n    if not src:\n        form = display_code_form()\n    else:\n        form = \'\'\n    if request.args==[]:\n        dest = \'RIC\'\n    else:\n        dest = request.args[1]\n\n    path = request.env.web2py_path +\'/applications/\' +request.application + \'/static/images/\' + src + \'/\' + dest + \'/\'\n    files = []\n    for (dirpath, dirnames, filenames) in walk(path):\n        filenames = [f.replace(\'/HOME/WWW-DATA/\', \'\') for f in filenames]\n        files.extend(filenames)\n        break\n    dir_path = request.env.web2py_path +\'/applications/\' +request.application + \'/static/images/\' + src + \'/\'\n    dirs = [x[0] for x in os.walk(dir_path)]\n    dirs = [d.replace(\'/home/www-data/web2py/applications/travel/static/images/\', \'\') for d in dirs]\n    replace(files, dirs)\n    return dict(files=files, dest=dest, dirs=dirs, form=form, src=src)\n\n\ndef get_codes():\n    rows = get_airport_code()\n    codes= []\n    for row in rows:\n        codes.append(row.three_letter_code)\n    return codes\n\ndef stringify(item):\n    new_string = \'\'\n    for i in item:\n        new_string = new_string + i\n    new_string = new_string[:-1]\n    return new_string\n\n\ndef display_code_form():\n    form = SQLFORM(db.user_airport_code)\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    return form\n\ndef location():\n    ip = \'150.210.231.30\'\n    rawdata = pygeoip.GeoIP(request.env.web2py_path +\'/applications/\' +request.application + \'/static/GeoLiteCity.dat\')\n    data = rawdata.record_by_name(ip)\n    if data:\n        longi = data[\'longitude\']\n        lat = data[\'latitude\']\n    else:\n        lat = 100000\n        longi = -10000\n    return dict(lat=lat, longi=longi)\n\ndef get_airport_code():\n    lat = location().values()[0]\n    longi = location().values()[1]\n    rows = \'\'\n    first_rows = db((db.airport_info.latitude <= (lat)) & (db.airport_info.name.like(\'%Intl\'))).select(db.airport_info.latitude, limitby=(0, 1), orderby=~db.airport_info.latitude)\n    new_long = first_rows\n    second_rows = db((db.airport_info.longitude <= (new_long)) & (db.airport_info.name.like(\'%Intl\'))).select(db.airport_info.longitude, limitby=(0, 1), orderby=~db.airport_info.longitude)\n    return second_rows\n\n\n\ndef replace(files, dirs):\n    files = [f.replace(\'/HOME/WWW-DATA/\', \'\') for f in files]\n    return files\n\ndef image(): # http://.../image/where/ever/it/is.jpeg\n    filename = os.path.join(BASEDIR,\'/\'.join(request.args))\n    return response.stream(open(filename,\'rb\'))\n\ndef populateWeekendDates():\n    weekend_dates = []\n    start = datetime.datetime.now() + datetime.timedelta(days=1)\n    #3 months into the future\n    end =  (start + datetime.timedelta(1*365/12))\n    begin = start\n    delta = datetime.timedelta(days=1)\n    diff = 0\n    #ONLY CALCULATE FRIDAY SINCE YOU CAN DO THE MATH FOR SUNDAY..\n    weekend = set([3])\n    while(begin<=end):\n            if(begin.weekday() in weekend):\n                    weekend_dates.append(begin)\n                    diff+=1\n            begin+=delta\n    return weekend_dates\n\ndef browserScreenshot(url,start_date,end_date,dest,source):\n        browser = driver = webdriver.PhantomJS()\n        browser.get(url)\n        delay = 0\n        wait = WebDriverWait(browser, delay)\n        wait.until(EC.presence_of_element_located((By.ID, \'root\')))\n        time.sleep(1)\n        stringtime = str(start_date) + \'->\' + str(end_date)\n        newdir = request.env.web2py_path +\'/applications/travel/static/images/\' + source + \'/\' + dest + "/"\n        if not os.path.exists(newdir):\n                os.makedirs(newdir)\n        filename = request.env.web2py_path +\'/applications/travel/static/images/\' + source+ \'/\' + dest + \'/flight\' + stringtime + ".png"\n        browser.save_screenshot(filename)\n        browser.close()\n\n\ndef makeCalls(src,weekend_dates, dest):\n    source = src\n    for date in weekend_dates:\n            start_date = datetime.datetime.strftime(date,\'%Y-%m-%d\')\n            end_date = datetime.datetime.strftime(date+datetime.timedelta(3),\'%Y-%m-%d\')\n            url = \'https://www.google.com/flights/#search;f=\'+source+\';t=\'+dest+\';d=\'+start_date+\';r=\'+end_date+\'\'\n            #print url\n            browserScreenshot(url,start_date, end_date,dest, source)\n\n\n\ndef callAllDestinations(source, weekend_dates, dest):\n        for d in dest:\n                makeCalls(source, weekend_dates, str(d))\n\ndef deleteFiles(source):\n    folder = request.env.web2py_path +\'/applications/travel/static/images/\' + source + \'/\'\n    if os.path.isdir(folder):\n        for the_file in os.listdir(folder):\n            file_path = os.path.join(folder, the_file)\n            try:\n                if os.path.isfile(file_path):\n                    os.unlink(file_path)\n                elif os.path.isdir(file_path): shutil.rmtree(file_path)\n            except Exception as e:\n                print(e)\n\ndef test():\n    weekend_dates = populateWeekendDates()\n    source = str(get_codes()[0])\n    deleteFiles(source)\n    dest = [\'DEN\',\'LAX\'] #, \'SFO\', \'CUN\', \'MSY\', \'JFK\', \'RIC\',\'DCA\',\'IAD\']   \n    callAllDestinations(source, weekend_dates,dest)\n    \ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(get_airport_code)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/travel/controllers/default.py", line 214, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/travel/controllers/default.py", line 97, in get_airport_code\n    second_rows = db((db.airport_info.longitude <= (new_long)) & (db.airport_info.name.like(\'%Intl\'))).select(db.airport_info.longitude, limitby=(0, 1), orderby=~db.airport_info.longitude)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 767, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 864, in LE\n    self.expand(second,first.type))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1454, in represent\n    return repr(float(obj))\nTypeError: float() argument must be a string or a number\n'
p11
s.